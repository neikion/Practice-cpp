출처 : https://gumeo.github.io/post/emplace-back/

push와 emplace모두 내부에서 객체를 생성한다.
push는 객체를 입력으로 받기 때문에 임시 객체를 하나 만들어서 호출해야한다.
임시 객체는 push내부에서 복사 생성자로 새로운 객체가 생성되어 리스트에 삽입된다.
함수 외부에서 한번 만들고, 함수 내부에서 한번 만들어 객체를 생성하는 비용이 든다.

emplace는 객체 생성에 필요한 인자를 받아 함수 내부에서 객체를 만든다.
생성자 인수를 받아서, 함수 내부에서 객체를 만들어 리스트에 삽입한다.
함수 내부에서만 객체를 만들기 때문에 객체를 복사하는 비용이 줄어든다.
다만, 인수를 받아 내부에서 객체를 만들기 때문에 암시적 변환을 막기 힘들다.
사용할 자료형의 생성자에 따라 의도치 않은 효과나 오류가 발생할 수 있다.
td::vector<std::vector<int>> foo_bar;
foo_bar.emplace_back(20);
와 같이 사용하면 vector[0]에 20개의 새로운 요소를 만들라는 것과 같아
foo_bar[0]에 20개의 빈 리스트를 생성하게 된다.

객체의 이동 비용이 비쌀 경우, emplace를 고려해볼 수 있겠다.