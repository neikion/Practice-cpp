출처 : https://stackoverflow.com/questions/6500313/why-should-c-programmers-minimize-use-of-new

#사전지식
메모리 할당 방식은 2가지
1. 스택에 할당
2. 힙에 할당

1. 스텍에 할당
항상 순차적 방식으로 메모리 할당. 많은 프로그래밍 언어는 이렇게 동작하고,
할당할 메모리 주소를 알기 쉽고 관리도 편함

할당 속도 빠름
코드 블록 실행 완료시 메모리 자동 해제


2. 힙에 할당
관리가 복잡하고, 직접 헤제 해야하고, 할당 시간도 오래 걸리지만 메모리에 대한 자유로운 사용 가능.
(스택도 설정만 한다면 1mb이상의 크기를 할당할 수 있다.)

메모리가 얼마나 필요할지 모를때
코드 블록이 실행 완료된 후에도 메모리가 살아있어야 할 때


#본론
std::string같은 경우 내부의 힙을 사용하여 메모리 할당하고 소멸자에서 헤제함.

std::string * program = new std::string(argv[0]);  // Bad!
delete program;
예를 들어 string을 힙에다 할당하는 것은 불필요하게 추가로 할당하는 것일 수 있고,
메모리 헤제를 잊어버릴 위험성도 있음.

또한, 이미 소멸자에 delete가 있는 string을 또 delete하여 오류를 일으킬 수도 있음.


#결론
가급적 stack을 사용하여 실행 속도 향상 및 메모리 누수 가능성 최소화를 챙기는게 좋음.

또한, 함수가 끝나면 자동으로 리소스를 헤제하는 RAII같은 설계 패턴이 모범으로 여겨지는 이유임.
RAII는 중간에 오류가 생겨 오류 문장 이후에 있는 delete를 만나지 못해도 리소스를 헤제하는 설계패턴.
(C++에는 CG가 없기에 이런 설계패턴을 사용한다 생각됨.)

