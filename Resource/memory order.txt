memory_order_relaxed
순서는 보장하지 않지만, 결과가 항상 같음을 보장합니다.

atomic_thread_fence(relaxed);
아무 작업도 하지 않음.


memory_order_release - memory_order_acquire
release
데이터를 저장할 때 사용합니다.
이 이전 명령이 이후로 이동할 수 없습니다.

acquire
데이터를 읽을 때 사용합니다.
이 이후 명령이 이전으로 이동할 수 없습니다.

release - acquire
이전 쓰레드들이 아니라, 마지막 쓰레드만 동기화합니다.
(출처 : https://stackoverflow.com/questions/12346487/what-do-each-memory-order-mean/70585811#70585811)
중간에 어떤 memory order를 가진 읽기, 수정, 쓰기 명령이든 숫자의 관계 없이 전반에 걸쳐 동기화가 전파되는 특별한 규칙이 있습니다.
( 예 :
a.store(1, release); // 1
a.fetch_add(2, relaxed); // 2
a.load(acquire) // 3
중간에 relaxed가 있어도 1과 3은 동기화됩니다.)

이 특별한 규칙은 같은 변수에 대해 release 연산 x와 그 후속 읽기, 수정, 쓰기 작업들을 x로 시작되는 release sequence라고 부릅니다.
(그러므로 릴리즈 시퀀스에서 어떤 연산으로부터든 acquire를 읽으면 시퀀스의 헤드와 동기화됩니다.)

atomic_thread_fence(release); 또는 atomic_thread_fence(acquire);
기본적으로 relaxed 연산을 release/acquire 연산으로 바꿉니다.
하나의 fence는 둘 이상 연산에 and 또는 or 조건을 수행할 수 있습니다.

만약 하나 이상의 변수에서 releaxd와 같은 다른 memory order를 읽고, 같은 쓰레드에서 atomic_thread_fence(acquire)를 실행한다면, 그 memory order들은 acquire 연산으로 간주됩니다.



memory_order_seq_cst
가장 느리지만 안전한 작업
읽기는 acquire연산, 쓰기는 release연산으로 수행
읽기-수정-쓰기 연산은 양쪽 모두로 수행

seq_cst연산은 서로 동기화 될 수 있고, acquire와 release연산과도 동기화 될 수 있습니다.(섞어서 사용시 특별한 효과의 주의를 요함)

seq_cst는 memory order의 기본값임.
(atomic<int> x; 이 있을 때,
x=1; 은
x.store(1, memory_order_seq_cst) 와 같음)

seq_cst는 모든 쓰레드들이 seq_cst연산의 순서에 동의합니다.

전역 연산 순서의 존재는 seq_cst로 로드하여 얻은 값들에만 영향을 미치는 것으로 보입니다.
더 약한 memory order의 원자적 연산과 원자적이 아닌 값들에는 (seq_cst fence가 관련되지 않는한) 영향을 미치지 않습니다.
또한, 그것만으로는 acq/rel연산에 비해 어떤 데이터 경쟁의 정의되지 않은 작업을 막지 않습니다.

무엇보다도, 이 순서는 seq_cst와 acq/rel을 혼합하여 사용한 동기화를 제외하고 위 rel/acq 대해 설명한 관계에 따른 동기화를 준수합니다.
이런 혼합은 근본적으로 seq_cst연산을 acq/rel로 강등시킵니다.
일부 seq_cst특성을 유지할 수 있으나 의존하지 않는 것이 좋습니다.
(
단일 전역순서는 happens-before와 반드시 일치하지는 않는다.

아레 코드는 c++20 이전의 표준에서는 금지되었지만, 아키텍처에 따라 가능했으며, c++20부터 가능하도록 표준이 수정되었다.
x와 y가 0으로 초기화 될 때
// Thread 1:
x.store(1, std::memory_order_seq_cst); // A
y.store(1, std::memory_order_release); // B
// Thread 2:
r1 = y.fetch_add(1, std::memory_order_seq_cst); // C
r2 = y.load(std::memory_order_relaxed); // D
// Thread 3:
y.store(3, std::memory_order_seq_cst); // E
r3 = x.load(std::memory_order_seq_cst); // F

r1 == 1 && r2 == 3 && r3 == 0이 발생할 수 있습니다.
위 순서에서 A는 C보다 먼저 일어나지만(happens-before), memory_order_seq_cst의 단일 전체 순서 C-E-F-A에서 C는 A 보다 먼저 실행됩니다.
seq_cst가 아닌 원자적 연산이 입력되자마자 순차적 일관성 보장이 손실됩니다.
많은 경우에서, seq_cst 원자적 연산은 같은 쓰레드에서 실행되는 원자적 연산에 대하여 재정렬 할 수 있습니다.

나의 이해 :
seq_cst끼리의 순서를 정해야함.
C는 B와 동기화를 이루므로 B의 값을 읽지만, seq_cst 순서에는 영향을 미치지 않음.
그러므로 C가 seq_cst 순서 처음으로 올 수 있음.
그러므로 A는 C전에 일어나도, seq_cst의 단일 전체 순서 C-E-F-A에서는 C가 A앞에 올 수 있음.


코드의 실행 순서
t1 x.store(1, std::memory_order_seq_cst); // A(읽었으나 현지점에서 관찰되지 않고 나중에 관찰됨)
t1 y.store(1, std::memory_order_release); // B
t2 r1 = y.fetch_add(1, std::memory_order_seq_cst); // C
t3 y.store(3, std::memory_order_seq_cst); // E
t2 r2 = y.load(std::memory_order_relaxed); // D
t3 r3 = x.load(std::memory_order_seq_cst); // F
t1 x.store(1, std::memory_order_seq_cst); // A(여기 지점에서 관찰됨)

위의 경우 store에 의해 쓰인 값을 load가 볼 수 없다면, 로드는 store 앞에 위치합니다.
seq_cst와 다른 원자적 연산이 수행되면, 단일 전체 순서에서 seq_cst끼리 재정렬이 가능해짐.
rel/acq의 동기화(synchronizes with)는 존재하나 seq_cst연산의 전체 순서에는 영향을 미치지 않음.

아레 순서는 확실하지 않으며 짐작임.
1. t1부터 시작하여, A를 읽음.
2. seq_cst의 단일 전체 순서에서 y를 작업하는 연산은 C와 E가 있는데, E는 release 작업이므로, B와 C가 rel/acq동기화를 이룸
3. store는 load를 넘어설 수 없기에, E는 C뒤로 오게 됨.
4. t3에서 E다음 코드인 F가 오게 됨.
5. F가 남았으나, 위에 A가 있어 store는 load를 넘지 말아야 됨. 그러므로 A를 F뒤로 재정렬함.
결론적으로 A를 먼저 읽었으나, 규칙에 따라 A는 가장 뒤로 밀릴 수 있음.
)
seq-cst연산과 rel/acq 연산 사이간에 동기화는 전역 seq-cst order에서 이 특정 seq-cst연산의 위치는 더이상 영향을 미치지 않습니다. 하지만, 동기화 자체는 여전히 있습니다.

atomic_thread_fence(seq_cst)
모든 쓰레드는 seq_cst펜스의 순서에 동의합니다.(seq_cst펜스는 seq_cst작업의 전역 순서에 참여함)
본질적으로 원자적 연산이 재배치 되는 것을 방지합니다.

atomic_bool x = true;
atomic_bool y = true;

// Thread 1:
x.store(false, relaxed);
atomic_thread_fence(seq_cst);
if (y.load(relaxed)) {...}

// Thread 2:
y.store(false, relaxed);
atomic_thread_fence(seq_cst);
if (x.load(relaxed)) {...}

위 코드에서 두 쓰레드 모두 같은 시간에 if문 안으로 접근하지 못합니다.
fence 너머 load의 order를  store전에 다시 지정하는 것이 필요하기 때문입니다.
표준에서는 order를 다시 지정하는 측면에서는 설명하지 않으나, seq_cst 연산의 적연순서를 어떻게 배치되는 지를 통해서 설명합니다.

(
일관성 순서에 대한 표준
다음 중 하나라도 참인 경우, 원자적 객체 M에 원자적 연산A가 다른 원자적 연산 B 이전에 일관성 순서를 이룹니다.
1. A는 수정, B는 A에 의해 저장된(store) 값을 읽습니다.
2. 수정 순서 M에서 A는 B에 선행합니다.
3. A는 원자적 수정 X에 의해 저장된(store) 값을 읽고, X는 수정 순서에서 B 보다 선행, 그리고 A와 B는 같은 원자적 읽기-수정-쓰기 연산이 아닙니다.
4. A는 X 이전에 일관성 순서를 이루고, X는 B 이전에 일광선 순서를 이룹니다.

객체 M에 모든 원자적 연산 쌍 A와 B에 대헤, A는 B이전에 일관성 순서(coherence-ordered-before)를 이룬다.
1. A와 B 모두 memory_order_seq_cst연산이면, S에서 A는 B 보다 선행한다.
2. A는 memory_order_seq_cst연산이고, B가 memory_order_seq_cst 펜스 Y 이전에 발생했을 때, S에서 A는 Y보다 선행한다.
3. memory_order_seq_cst 펜스 X가 A 이전에 발생하고, B는 memory_order_seq_cst연산일 때, S에서 X는 B보다 선행합니다.
4. memory_order_seq_cst 펜스 X가 A 이전에 발생하고, B가 memory_order_seq_cst 펜스 Y이전에 발생하면, X는 Y보다 선행한다.
)

위의 코드에서 첫 번째 스레드가 if에 들어가면 첫 번째 펜스가 두 번째 보다 빠른 순서가 되어야 합니다.
첫 번째 스레드가 if문에 들어갈 경우 첫 번째 펜스는 두 번째 펜스보다 먼저 호출되어야 합니다.
seq_cst펜스는 연관된 그 이전 상태를 모두 확인했다는 의미임.
스레드 1의 if문에 들어갈 경우, y.load의 조건이 true였다는 이야기고, 이는 스레드 2의 y.store를 관찰했다는 의미가 됨. 즉, 스레드 1이 스레드 2가 y.store를 하는 것을 관찰해야 된다는 것을 의미함.
반대로 두 스레드가 동시에 if문에 들어갈 경우, 서로가 서로의 이전 상태(store가 되었는지)를 미리 확인해야 된다는 의미가 되므로 모순이됨.
그러므로, 동시에 같은 if문에 접근할 수 없음.