std::ref는 reference_wrapper를 반환합니다.
reference_wrapper는 객체의 참조를 복사 가능(복사 할당, 복사 생성 모두 가능한)한 참조자로 만들고 싶을 때 사용합니다.
std::bind와 std::thread같은 함수에 참조로 전달하면, 객체가 복사 전달되어 함수 외부에 객체는 함수에 영향을 받지 않게 됩니다.
이를 막기 위해, reference_wrapper를 이용하여 원래 객체가 영향을 받도록 합니다.


출처 : https://stackoverflow.com/questions/33240993/what-is-the-advantage-of-stdref-and-stdreference-wrapper-compared-to-regular

std::ref는 파라미터에 대한 직접 참조가 아닌, 파라미터를 참조하고 있는 reference_wrapper를 반환합니다.

reference_wrapper는 객체의 참조를 복사 가능(복사 할당, 복사 생성 모두 가능한)한 참조자로 만들고 싶을 때 유용합니다. 

C++에서는 객체에 대한 참조를 생성하면  객체와 참조자가 동일한 주소를 공유합니다.
또한 참조자는 다른 객체를 참조할 수 없습니다. 또한 참조 배열도 만들 수 없습니다.

에러가 나는 코드 : 
#include <iostream>
using namespace std;

int main()
{
    int x=5, y=7, z=8;
    int& arr[] {x,y,z};    // error: declaration of 'arr' as array of references
    return 0;
}


허용되는 코드 : 
#include <iostream>
#include <functional>  // for reference_wrapper
using namespace std;

int main()
{
    int x=5, y=7, z=8;
    reference_wrapper<int> arr[] {x,y,z};
    for (auto a: arr)
        cout << a << " ";
    return 0;
}
/* OUTPUT:
5 7 8
*/

reference_wrapper는 다음과 같은 특징이 있습니다.
1. reference_wrapper이용하여 참조자 배열을 만들 수 있습니다.
2. reference_wrapper는 실제 참조처럼 작동합니다.
3. reference_wrapper는 할당했던 객체의 참조자와 직접 비교하면 동일하지 않지만(T& 와 reference_wrapper&는 같지 않음), reference_wrapper의 멤버함수 get()을 비교하면 같습니다.
(T& 와 &reference_wrapper.get()는 같음)

즉, reference_wrapper는 참조 T& 를 둘러싼 레퍼임을 알 수 있음.