enable_if
원하는 타입인지 확인할 때 사용.

SFINAE
치환 실패는 오류가 아니다를 줄인 약자.
단순히 타입의 실패만으로는 컴파일 오류가 나지 않음을 설명한다.



출처 : https://eli.thegreenplace.net/2014/sfinae-and-enable_if/ , https://modoocode.com/255
void foo(unsigned int value) {
	cout << "unsigned"<<endl;
}
template<typename t>
void foo(const t& value) {
	cout << "template"<<endl;
}

void main() {
	foo(1);
}

위 코드의 경우에 결과는 template이다.
정수 리터럴의 경우 기본적으로 부호 있는(signed) 정수로 취급되기 때문입니다.(끝에 U를 붙이지 않는 이상 부호 있는 정수가 됨.)
컴파일러가 오버로딩 후보들을 확인할 때, 첫 번째 버전은 unsigned로 타입 변환이 필요하지만, 두 번째 버전은 타입 변환없이 t가 int로 변환되어 맞아떨어지기 때문에 두 번째 함수가 선택됩니다.


컴파일러가 템플릿으로 선언된 오버로딩 후보들을 살펴볼 때, 템플릿 인자들의 타입들을 유추한 후에 이로 치환하는 과정에서 말도 안되는 코드를 생산할 때가 있습니다.
int negate(int i) {
  return -i;
}

template <typename T>
typename T::value_type negate(const T& t) {
  return -T(t);
}

negate(42)를 실행한다 생각합시다. 컴파일러가 아래의 후보를 확인하는 과정에서 템플릿 인자 T 를 int 로 추론하게 되는데, 이 과정에서 아래와 같은 이상한 코드가 생성됩니다.
int::value_type negate(const int& t)
{

};
int 에는 value_type 이라는 멤버가 없기 때문에 잘못된 코드입니다.
하지만 오류 메시지를 표시하지 않습니다.

SFINAE
C++ 11 표준의 14.8.2에 따르면 템플릿 인자 치환에 실패할 경우 이 오류를 무시하고, 그냥 오버로딩 후보에서 제외하면 된다라고 명시되어 있습니다.
이를 흔히 치환 실패는 오류가 아니다.(Substitutation Failure IS Not An Error, SFINAE)라고 합니다.
그러나, 함수 타입이나 템플릿 인자 타입의 immediate context에서 잘못된 타입과 표현식만이 추론 실패 결과가 나올 수 있습니다.

immediate context란?

template <typename T>
void negate(const T& t) {
  typename T::value_type n = -t();
}
value_type을 멤버로 가지지 않는 어떤 타입에 대해 위 템플릿의 타입 유추를 수행한다고 생각합시다.
이 경우 SFINAE로 컴파일 오류가 나지 않는게 아니라, 함수 내부 T::value_type 때문에 컴파일 오류가 발생합니다.
이는 T::value_type이 함수 타입과 템플릿 인자 타입의 immediate context 바깥에 있기 때문입니다.
따라서 특정한 타입들에게만 작동하는 템플릿을 작성하고 싶다면, 함수 선언부에 올바르지 않은 타입에 대해 치환 오류를 발생시켜야 합니다.

enable_if
enable_if는 SFINAE를 활용하는 도구로 사용됩니다.
아레와 같이 구현될 수 있습니다.

template <bool, typename T = void>
struct enable_if {};

template <typename T>
struct enable_if<true, T> {
  typedef T type;
};

enable_if 사용 예시

template <class T, typename enable_if<is_integral<T>::value, T>::type* = nullptr>
void do_stuff(T& t) {
  std::cout << "do_stuff integral\n";
  // 정수 타입들을 받는 함수 (int, char, unsigned, etc.)
}

template <class T, typename enable_if<is_class<T>::value, T>::type* = nullptr>
void do_stuff(T& t) {
  // 일반적인 클래스들을 받음
}
do_stuff(int value) 같이 함수를 호출한다면 컴파일러는 첫 번째 오버로딩을 고릅니다.
is_integral<T>::value가 참이기 때문입니다.
두 번째 오버로딩은 후보군에서 제외되는데 is_class<int>::value가 되어 false를 반환됩니다. 그래서 enable_if 내부에 type이 정의되지 않은 일반적인 형태의 struct enable_if {}가 반환되고 type이 없으므로 치환 오류가 발생하게 됩니다.
